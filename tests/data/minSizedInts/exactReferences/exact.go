// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "encoding/json"
import "fmt"

type Bound16 int16

// UnmarshalJSON implements json.Unmarshaler.
func (j *Bound16) UnmarshalJSON(b []byte) error {
	type Plain Bound16
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 32767 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 32767)
	}
	if -32768 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", -32768)
	}
	*j = Bound16(plain)
	return nil
}

type Bound32 int32

// UnmarshalJSON implements json.Unmarshaler.
func (j *Bound32) UnmarshalJSON(b []byte) error {
	type Plain Bound32
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 2147483647 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 2147483647)
	}
	if -2147483648 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", -2147483648)
	}
	*j = Bound32(plain)
	return nil
}

type Bound64 int64

// UnmarshalJSON implements json.Unmarshaler.
func (j *Bound64) UnmarshalJSON(b []byte) error {
	type Plain Bound64
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 9223372036854775807 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 9223372036854775807)
	}
	if -9223372036854775808 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", -9223372036854775808)
	}
	*j = Bound64(plain)
	return nil
}

type Bound8 int8

// UnmarshalJSON implements json.Unmarshaler.
func (j *Bound8) UnmarshalJSON(b []byte) error {
	type Plain Bound8
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 127 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 127)
	}
	if -128 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", -128)
	}
	*j = Bound8(plain)
	return nil
}

type Exact struct {
	// I16 corresponds to the JSON schema field "i16".
	I16 Bound16 `json:"i16" yaml:"i16" mapstructure:"i16"`

	// I32 corresponds to the JSON schema field "i32".
	I32 Bound32 `json:"i32" yaml:"i32" mapstructure:"i32"`

	// I64 corresponds to the JSON schema field "i64".
	I64 Bound64 `json:"i64" yaml:"i64" mapstructure:"i64"`

	// I8 corresponds to the JSON schema field "i8".
	I8 Bound8 `json:"i8" yaml:"i8" mapstructure:"i8"`

	// U16 corresponds to the JSON schema field "u16".
	U16 UBound16 `json:"u16" yaml:"u16" mapstructure:"u16"`

	// U32 corresponds to the JSON schema field "u32".
	U32 UBound32 `json:"u32" yaml:"u32" mapstructure:"u32"`

	// U64 corresponds to the JSON schema field "u64".
	U64 UBound64 `json:"u64" yaml:"u64" mapstructure:"u64"`

	// U8 corresponds to the JSON schema field "u8".
	U8 UBound8 `json:"u8" yaml:"u8" mapstructure:"u8"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Exact) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["i16"]; raw != nil && !ok {
		return fmt.Errorf("field i16 in Exact: required")
	}
	if _, ok := raw["i32"]; raw != nil && !ok {
		return fmt.Errorf("field i32 in Exact: required")
	}
	if _, ok := raw["i64"]; raw != nil && !ok {
		return fmt.Errorf("field i64 in Exact: required")
	}
	if _, ok := raw["i8"]; raw != nil && !ok {
		return fmt.Errorf("field i8 in Exact: required")
	}
	if _, ok := raw["u16"]; raw != nil && !ok {
		return fmt.Errorf("field u16 in Exact: required")
	}
	if _, ok := raw["u32"]; raw != nil && !ok {
		return fmt.Errorf("field u32 in Exact: required")
	}
	if _, ok := raw["u64"]; raw != nil && !ok {
		return fmt.Errorf("field u64 in Exact: required")
	}
	if _, ok := raw["u8"]; raw != nil && !ok {
		return fmt.Errorf("field u8 in Exact: required")
	}
	type Plain Exact
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Exact(plain)
	return nil
}

type UBound16 uint16

// UnmarshalJSON implements json.Unmarshaler.
func (j *UBound16) UnmarshalJSON(b []byte) error {
	type Plain UBound16
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 65535 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 65535)
	}
	if 0 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", 0)
	}
	*j = UBound16(plain)
	return nil
}

type UBound32 uint32

// UnmarshalJSON implements json.Unmarshaler.
func (j *UBound32) UnmarshalJSON(b []byte) error {
	type Plain UBound32
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 4294967295 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 4294967295)
	}
	if 0 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", 0)
	}
	*j = UBound32(plain)
	return nil
}

type UBound64 uint64

// UnmarshalJSON implements json.Unmarshaler.
func (j *UBound64) UnmarshalJSON(b []byte) error {
	type Plain UBound64
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 9223372036854775807 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 9223372036854775807)
	}
	if 0 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", 0)
	}
	*j = UBound64(plain)
	return nil
}

type UBound8 uint8

// UnmarshalJSON implements json.Unmarshaler.
func (j *UBound8) UnmarshalJSON(b []byte) error {
	type Plain UBound8
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if 255 < plain {
		return fmt.Errorf("field %s: must be <= %v", "", 255)
	}
	if 0 > plain {
		return fmt.Errorf("field %s: must be >= %v", "", 0)
	}
	*j = UBound8(plain)
	return nil
}
